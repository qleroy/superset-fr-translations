name: Translate and Convert PO Files

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Correspond aux tags de la forme nombre.nombre.nombre

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Specify the Python version you need

    - name: Setup Git configuration
      run: |
        # Create a basic Git config
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        # Debug Git config location
        echo "Git config location: $(git config --list --show-origin | head -n 1)"

    - name: Check permissions
      run: |
        echo "Current user: $(whoami)"
        echo "Current directory: $(pwd)"
        echo "Directory listing: $(ls -la)"
        echo "Home directory: $HOME"
        echo "RUNNER_TEMP: $(ls -la $RUNNER_TEMP || echo 'Cannot access RUNNER_TEMP')"
        echo "GITHUB_WORKSPACE: $(ls -la $GITHUB_WORKSPACE || echo 'Cannot access GITHUB_WORKSPACE')"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install babel
        wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.2/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        nvm install 20
        nvm use 20
        npm install -g po2json

    - name: Compile PO files
      run: |
        pybabel compile -d superset/translations || true

    - name: Convert PO to JSON
      run: |
        export PATH="$HOME/.nvm/versions/node/v20.*/bin:$PATH"
        echo "PATH: $PATH"
        echo "po2json path: $(which po2json || echo 'po2json not found')"

        for file in $( find ./superset/translations/** -name '*.po' );
        do
          extension=${file##*.}
          filename="${file%.*}"
          if [ $extension == "po" ]
          then
            echo "po2json --domain superset --format jed1.x $file $filename.json"
            po2json --format jed1.x $file $filename.json
            #prettier --write $filename.json
          fi
        done
        for file in $( find ./fab/translations/** -name '*.po' );
        do
          extension=${file##*.}
          filename="${file%.*}"
          if [ $extension == "po" ]
          then
            echo "po2json --domain fab --format jed1.x $file $filename.json"
            po2json --format jed1.x $file $filename.json
            #prettier --write $filename.json
          fi
        done

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset - fab/messages.mo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: fab/translations/fr/LC_MESSAGES/messages.mo
        asset_name: fab-messages.mo
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - superset/messages.mo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: superset/translations/fr/LC_MESSAGES/messages.mo
        asset_name: superset-messages.mo
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - fab/messages.json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: fab/translations/fr/LC_MESSAGES/messages.json
        asset_name: fab-messages.json
        asset_content_type: application/json

    - name: Upload Release Asset - superset/messages.json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: superset/translations/fr/LC_MESSAGES/messages.json
        asset_name: superset-messages.json
        asset_content_type: application/json

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: translation-files
        path: |
          fab/translations/fr/LC_MESSAGES/messages.mo
          fab/translations/fr/LC_MESSAGES/messages.json
          superset/translations/fr/LC_MESSAGES/messages.mo
          superset/translations/fr/LC_MESSAGES/messages.json

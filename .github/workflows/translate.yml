name: Translate and Convert PO Files

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Correspond aux tags de la forme nombre.nombre.nombre

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Prepare Git environment
      run: |
        echo "Preparing Git environment"
        # Make sure .gitconfig exists and is writable
        touch $HOME/.gitconfig
        chmod 644 $HOME/.gitconfig
        # Make temp directory if it doesn't exist
        mkdir -p $RUNNER_TEMP
        # Create a minimal initial git config to avoid warnings
        git config --global --add safe.directory "*"
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        # Show the current Git configuration
        echo "Current Git configuration:"
        git config --list

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip --no-cache-dir
        pip install babel --no-cache-dir

        # Install Node.js via NVM with detailed logging
        echo "Installing NVM..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

        echo "NVM installation directory contents:"
        ls -la $HOME/.nvm || echo "NVM directory not found"

        export NVM_DIR="$HOME/.nvm"
        echo "Loading NVM..."
        set -x # Enable command echo
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
        set +x # Disable command echo

        echo "Installing Node.js 20..."
        nvm install 20
        nvm use 20

        echo "Node.js and npm versions:"
        node --version
        npm --version

        echo "Installing po2json globally..."
        npm install -g po2json

        echo "po2json installation path:"
        which po2json || echo "po2json command not found"

        echo "Testing po2json command:"
        po2json --help || echo "po2json help command failed"

    - name: Check directory structure
      run: |
        echo "Current directory structure:"
        find . -type d | sort

        echo "PO files found:"
        find . -name "*.po" | sort

    - name: Compile PO files
      run: |
        echo "Compiling PO files with pybabel..."
        pybabel compile -d superset/translations || echo "pybabel compile exited with status $?"

        echo "Checking compiled .mo files:"
        find . -name "*.mo" | sort

    - name: Convert PO to JSON (debug)
      run: |
        # Load NVM and Node environment with full debug
        set -x # Echo all commands
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
        nvm use 20

        # Get absolute path to po2json and verify it's executable
        NPM_PO2JSON=$(npm bin -g)/po2json
        echo "po2json path: $NPM_PO2JSON"
        ls -la $NPM_PO2JSON
        file $NPM_PO2JSON

        # Test po2json with simple input
        echo "Testing po2json with simple input:"
        echo 'msgid "test"\nmsgid_plural "tests"\nmsgstr[0] "test"\nmsgstr[1] "tests"' > test.po
        $NPM_PO2JSON test.po test.json --format=jed1.x --domain=test || echo "Simple test failed with status $?"
        cat test.json || echo "Cannot read test.json"

        # Debug first PO file in detail
        SAMPLE_PO=$(find ./superset/translations -name "*.po" | head -1)
        if [ -n "$SAMPLE_PO" ]; then
          echo "Sample PO file: $SAMPLE_PO"
          echo "First 20 lines of sample PO file:"
          head -20 "$SAMPLE_PO"

          echo "Converting sample file with verbose output:"
          $NPM_PO2JSON --format=jed1.x --domain=superset "$SAMPLE_PO" "${SAMPLE_PO%.po}.json" --pretty || echo "Sample conversion failed with status $?"
        else
          echo "No PO files found in superset/translations"
        fi

        # Try regular conversion with error checking for each file
        echo "Processing all superset PO files one by one:"
        for file in $(find ./superset/translations -name "*.po"); do
          dirname=$(dirname "$file")
          basename=$(basename "$file" .po)
          output_file="$dirname/$basename.json"
          echo "Converting $file to $output_file"
          $NPM_PO2JSON "$file" "$output_file" --format=jed1.x --domain=superset
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "Error converting $file, exit code: $STATUS"
            echo "File content preview:"
            head -10 "$file"
          fi
        done

        echo "Processing all fab PO files one by one:"
        for file in $(find ./fab/translations -name "*.po"); do
          dirname=$(dirname "$file")
          basename=$(basename "$file" .po)
          output_file="$dirname/$basename.json"
          echo "Converting $file to $output_file"
          $NPM_PO2JSON "$file" "$output_file" --format=jed1.x --domain=fab
          STATUS=$?
          if [ $STATUS -ne 0 ]; then
            echo "Error converting $file, exit code: $STATUS"
            echo "File content preview:"
            head -10 "$file"
          fi
        done
        set +x # Disable command echo

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset - fab/messages.mo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: fab/translations/fr/LC_MESSAGES/messages.mo
        asset_name: fab-messages.mo
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - superset/messages.mo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: superset/translations/fr/LC_MESSAGES/messages.mo
        asset_name: superset-messages.mo
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - fab/messages.json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: fab/translations/fr/LC_MESSAGES/messages.json
        asset_name: fab-messages.json
        asset_content_type: application/json

    - name: Upload Release Asset - superset/messages.json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: superset/translations/fr/LC_MESSAGES/messages.json
        asset_name: superset-messages.json
        asset_content_type: application/json

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: translation-files
        path: |
          fab/translations/fr/LC_MESSAGES/messages.mo
          fab/translations/fr/LC_MESSAGES/messages.json
          superset/translations/fr/LC_MESSAGES/messages.mo
          superset/translations/fr/LC_MESSAGES/messages.json

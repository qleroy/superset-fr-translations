name: Translate and Convert PO Files

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'  # Correspond aux tags de la forme nombre.nombre.nombre

jobs:
  build:
    runs-on: self-hosted

    steps:
    - name: Prepare Git environment
      run: |
        echo "Preparing Git environment"
        # Make sure .gitconfig exists and is writable
        touch $HOME/.gitconfig
        chmod 644 $HOME/.gitconfig
        # Create a minimal initial git config to avoid warnings
        git config --global --add safe.directory "*"
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip --no-cache-dir
        pip install babel --no-cache-dir

        # Install Node.js via NVM
        echo "Installing NVM..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

        # Install specific Node version
        nvm install 20
        nvm use 20

        echo "Node.js version: $(node --version)"
        echo "npm version: $(npm --version)"

        # Install po2json globally
        npm install -g po2json

        # Find po2json path without using 'npm bin'
        echo "Finding po2json path..."
        PO2JSON_PATH=$(find $NVM_DIR/versions/node -name po2json -type f -executable | grep -v node_modules | head -1)
        echo "po2json path: $PO2JSON_PATH"

        if [ -z "$PO2JSON_PATH" ]; then
          echo "WARNING: Cannot find po2json executable. Using npx instead."
        fi

    - name: Compile PO files
      run: |
        echo "PYBABEL"
        pybabel compile --statistics -v -d superset/translations || true
        ls superset/translations/
        echo "PYBABEL DONE"

    - name: Convert PO to JSON
      run: |
        # Load NVM and Node environment
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
        nvm use 20

        # Find po2json path
        PO2JSON_PATH=$(find $NVM_DIR/versions/node -name po2json -type f -executable | grep -v node_modules | head -1)

        # Process superset translations
        mkdir -p superset/translations/fr/LC_MESSAGES
        for file in $(find ./superset/translations -name "*.po");
        do
          dirname=$(dirname "$file")
          basename=$(basename "$file" .po)
          output_file="$dirname/$basename.json"
          echo "Converting $file to $output_file"

          if [ -n "$PO2JSON_PATH" ]; then
            "$PO2JSON_PATH" "$file" "$output_file" --format=jed1.x --domain=superset || echo "Error converting $file"
          else
            npx po2json "$file" "$output_file" --format=jed1.x --domain=superset || echo "Error converting $file"
          fi
        done

        # Process fab translations
        mkdir -p fab/translations/fr/LC_MESSAGES
        for file in $(find ./fab/translations -name "*.po");
        do
          dirname=$(dirname "$file")
          basename=$(basename "$file" .po)
          output_file="$dirname/$basename.json"
          echo "Converting $file to $output_file"

          if [ -n "$PO2JSON_PATH" ]; then
            "$PO2JSON_PATH" "$file" "$output_file" --format=jed1.x --domain=fab || echo "Error converting $file"
          else
            npx po2json "$file" "$output_file" --format=jed1.x --domain=fab || echo "Error converting $file"
          fi
        done

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Asset - fab/messages.mo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: fab/translations/fr/LC_MESSAGES/messages.mo
        asset_name: fab-messages.mo
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - superset/messages.mo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: superset/translations/fr/LC_MESSAGES/messages.mo
        asset_name: superset-messages.mo
        asset_content_type: application/octet-stream

    - name: Upload Release Asset - fab/messages.json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: fab/translations/fr/LC_MESSAGES/messages.json
        asset_name: fab-messages.json
        asset_content_type: application/json

    - name: Upload Release Asset - superset/messages.json
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: superset/translations/fr/LC_MESSAGES/messages.json
        asset_name: superset-messages.json
        asset_content_type: application/json

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: translation-files
        path: |
          fab/translations/fr/LC_MESSAGES/messages.mo
          fab/translations/fr/LC_MESSAGES/messages.json
          superset/translations/fr/LC_MESSAGES/messages.mo
          superset/translations/fr/LC_MESSAGES/messages.json
